import java.util.ArrayList;

public class Airport
{
    /** A list of the flights into and out of this airport
     *  Guaranteed not to be null and to contain only non-null entries
     */
    private ArrayList<Flight> allFlights;

    public Airport(ArrayList<Flight> flights)
    {
        allFlights = flights;
    }

    public ArrayList<Flight> getAllFlights()
    {
        return allFlights;
    }

    /** Returns the revenue generated by all flights at the airport,
     *  as described in part (a)
     */
    public double getTotalRevenue()
    {
        int money = 0;

        for (Flight flight: allFlights )
        {
            if(Flight.getNumPassengers() > flight.getCapacity())
            {
                money+= flight.getCapacity() * flight.getPrice();
            }
            else
            {
                money+= Flight.getNumPassengers() * flight.getPrice();
            }
        }

        /* to be implemented in part (a) */
        return money;

    }

    /** Updates the list of flights by removing certain flights and
     *  returns the total number of passengers whose flights were removed,
     *  as described in part (b)
     */
    public int updateFlights()
    {
        int passengers = 0;
        for(int i >= 0; i < allFlights.size() -1; i--)
        {
            Flight current = allFlights.get(i);

            int minCapacity = (int) (current.get.capacity(i) * .02)

        }
int minCapacity = (int) (current.getCapacity() * .02)
        int passengers = currentFlight.getNumPassengers
        /* to be implemented in part (b) */
        if(passengers<minCapacity){
         passengers += passengers;
         allFlights.remove(i);
    }
    }
    return passengers;
}